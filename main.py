from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
import logging
from config import TOKEN, TIMEZONE
from tarot_cards import tarot_deck
import random
from pytz import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
SPREADS = {
    "1 –∫–∞—Ä—Ç–∞": {"price": 10, "cards": 1},
    "3 –∫–∞—Ä—Ç—ã": {"price": 25, "cards": 3},
    "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç": {"price": 50, "cards": 10},
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    users[user_id] = {
        "balance": 0,
        "registered": False,
        "name": None,
        "birth_date": None,
        "current_spread": None,
        "selected_cards": [],
        "deck": [],
    }
    
    await update.message.reply_text(
        "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞—Ä–æ-–ë–æ—Ç–∞!\n"
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register"
    )

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if users[user_id]["registered"]:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    users[user_id]["registered"] = True
    await update.message.reply_text(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    
    if not users[user_id]["registered"]:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register")
        return
    
    if not users[user_id]["name"]:
        users[user_id]["name"] = text
        await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
    elif not users[user_id]["birth_date"]:
        users[user_id]["birth_date"] = text
        users[user_id]["balance"] = 100  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        await update.message.reply_text(
            f"üéâ –ü—Ä–∏–≤–µ—Ç, {users[user_id]['name']}!\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}üí∞\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tarot –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
        )

async def tarot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not users.get(user_id, {}).get("registered"):
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register")
        return
    
    keyboard = [
        [InlineKeyboardButton(spread, callback_data=f"spread_{spread}")]
        for spread in SPREADS
    ]
    await update.message.reply_text(
        "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def spread_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    spread_name = query.data.split("_")[1]
    
    if users[user_id]["balance"] < SPREADS[spread_name]["price"]:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        return
    
    users[user_id]["current_spread"] = spread_name
    users[user_id]["balance"] -= SPREADS[spread_name]["price"]
    users[user_id]["deck"] = random.sample(tarot_deck, len(tarot_deck))
    users[user_id]["selected_cards"] = []
    
    await show_card_selection(query, user_id)

async def show_card_selection(query, user_id):
    current_card = len(users[user_id]["selected_cards"]) + 1
    total_cards = SPREADS[users[user_id]["current_spread"]]["cards"]
    
    keyboard = [
        [InlineKeyboardButton(card["name"], callback_data=f"card_{idx}")]
        for idx, card in enumerate(users[user_id]["deck"][:10])
    ]
    
    await query.edit_message_text(
        text=f"üÉè –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã {current_card}/{total_cards}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    card_idx = int(query.data.split("_")[1])
    
    users[user_id]["selected_cards"].append(users[user_id]["deck"][card_idx])
    total_needed = SPREADS[users[user_id]["current_spread"]]["cards"]
    
    if len(users[user_id]["selected_cards"]) < total_needed:
        await show_card_selection(query, user_id)
    else:
        result = "\n\n".join(
            f"{i+1}. {card['name']}: {card['meaning']}"
            for i, card in enumerate(users[user_id]["selected_cards"])
        )
        await query.edit_message_text(
            f"üìú {users[user_id]['name']}, –≤–∞—à —Ä–∞—Å–∫–ª–∞–¥:\n\n{result}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {users[user_id]['balance']}üí∞"
        )

def main():
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = [
        CommandHandler("start", start),
        CommandHandler("register", register),
        CommandHandler("tarot", tarot_handler),
        CallbackQueryHandler(spread_callback, pattern="^spread_"),
        CallbackQueryHandler(card_callback, pattern="^card_"),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
    ]
    
    for handler in handlers:
        application.add_handler(handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    application.job_queue.scheduler.configure(timezone=timezone(TIMEZONE))
    
    application.run_polling()

if __name__ == "__main__":
    main()