from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
import logging
from config import TOKEN, TIMEZONE
from tarot_cards import tarot_deck
from database import init_db, get_user, update_user
from pytz import timezone
import random
import sqlite3

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
SPREADS = {
    "1 –∫–∞—Ä—Ç–∞": {"price": 10, "cards": 1},
    "3 –∫–∞—Ä—Ç—ã": {"price": 25, "cards": 3},
    "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç": {"price": 50, "cards": 10},
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        if not get_user(user_id):
            with sqlite3.connect('tarot.db') as conn:
                conn.execute(
                    "INSERT INTO users (user_id) VALUES (?)", 
                    (user_id,)
                )
        await update.message.reply_text(
            "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!")

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        user = get_user(user_id)
        if user['registered']:
            await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return
            
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        update_user(user_id, registered=1)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        text = update.message.text
        user = get_user(user_id)
        
        if not user['name']:
            update_user(user_id, name=text)
            await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
        elif not user['birth_date']:
            update_user(user_id, birth_date=text, balance=100)
            await update.message.reply_text(
                f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–ë–∞–ª–∞–Ω—Å: 100üí∞\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tarot –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update.effective_message:
        await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handlers = [
        CommandHandler("start", start),
        CommandHandler("register", register),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
    ]
    
    for handler in handlers:
        application.add_handler(handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    tz = timezone(TIMEZONE)
    if application.job_queue:
        application.job_queue.scheduler.configure(timezone=tz)
    
    application.run_polling()

if __name__ == "__main__":
    main()